(()=>{"use strict";function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},t(e)}function e(e,r){for(var n=0;n<r.length;n++){var o=r[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,(void 0,i=function(e,r){if("object"!==t(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var o=n.call(e,"string");if("object"!==t(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(o.key),"symbol"===t(i)?i:String(i)),o)}var i}var r=function(){function t(e,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._config=e,this._form=r,this._inputList=Array.from(this._form.querySelectorAll(this._config.inputSelector)),this._buttonElement=this._form.querySelector(this._config.submitButtonSelector),this._spanErrors=Array.from(this._form.querySelectorAll(".popup__error"))}var r,n;return r=t,(n=[{key:"_hideInputError",value:function(t){t.classList.remove(this._config.inputErrorClass);var e=this._form.querySelector(".".concat(t.id,"-error"));e.classList.remove(this._config.errorClass),e.textContent=""}},{key:"_showInputError",value:function(t){t.classList.add(this._config.inputErrorClass);var e=this._form.querySelector(".".concat(t.id,"-error"));e.classList.add(this._config.errorClass),e.textContent=t.validationMessage}},{key:"_hasInvalidInput",value:function(t){return t.some((function(t){return!t.validity.valid}))}},{key:"_toggleButtonState",value:function(){this._hasInvalidInput(this._inputList)?(this._buttonElement.classList.add(this._config.inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._config.inactiveButtonClass),this._buttonElement.disabled=!1)}},{key:"_checkInputValidity",value:function(t){t.validity.valid?this._hideInputError(t):this._showInputError(t)}},{key:"_setEventListeners",value:function(){var t=this;this._inputList.forEach((function(e){e.addEventListener("input",(function(){t._checkInputValidity(e),t._toggleButtonState()}))}))}},{key:"enableValidation",value:function(){this._setEventListeners()}},{key:"disableAddCardPopupButton",value:function(){this._buttonElement.classList.add(this._config.inactiveButtonClass),this._buttonElement.disabled=!0}},{key:"switchProfileButtonMode",value:function(){this._buttonElement.classList.remove(this._config.inactiveButtonClass),this._buttonElement.disabled=!1}},{key:"switchErrorMode",value:function(){this._spanErrors.forEach((function(t){t.textContent=""})),this._inputList.forEach((function(t){t.classList.remove("popup__input_type_error")}))}}])&&e(r.prototype,n),Object.defineProperty(r,"prototype",{writable:!1}),t}();function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}function o(t,e){for(var r=0;r<e.length;r++){var o=e[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,(void 0,i=function(t,e){if("object"!==n(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var o=r.call(t,"string");if("object"!==n(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(o.key),"symbol"===n(i)?i:String(i)),o)}var i}var i=function(){function t(e,r,n,o,i){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._title=e.name,this._photo=e.link,this._likes=e.likes,this._owner=e.owner,this._id=e._id,this._myId=r,this._templateSelector=n,this._openFullscreen=o,this._openRemoveCardPopup=i}var e,r;return e=t,(r=[{key:"_showUrn",value:function(){this._myId!==this._owner&&(this._deleteButton.style.display="none")}},{key:"_showLike",value:function(){}},{key:"_getTemplate",value:function(){return document.querySelector(this._templateSelector).content.querySelector(".card").cloneNode(!0)}},{key:"_setData",value:function(){this._cardTitle.textContent=this._title,this._cardImage.src=this._photo,this._cardImage.alt=this._title,this._likesCounter.textContent=this._likes.length}},{key:"_deleteCard",value:function(){this._newCard.remove(),this._newCard=null}},{key:"_switchLike",value:function(){this._likeButton.classList.toggle("card__like_active")}},{key:"_setEventListeners",value:function(){var t=this;this._deleteButton.addEventListener("click",(function(){t._openRemoveCardPopup()})),this._likeButton.addEventListener("click",(function(){t._switchLike()})),this._cardImage.addEventListener("click",(function(){t._openFullscreen(t._title,t._photo)}))}},{key:"generateCard",value:function(){return this._newCard=this._getTemplate(),this._cardTitle=this._newCard.querySelector(".card__title"),this._cardImage=this._newCard.querySelector(".card__photo"),this._deleteButton=this._newCard.querySelector(".card__delete-button"),this._likeButton=this._newCard.querySelector(".card__like"),this._likesCounter=this._newCard.querySelector(".card__likes-counter"),this._showUrn(),this._setData(),this._setEventListeners(),this._newCard}}])&&o(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function u(t){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},u(t)}function c(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==u(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==u(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===u(o)?o:String(o)),n)}var o}var l=function(){function t(e,r,n){e.items;var o=e.renderer;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._renderer=o,this._container=document.querySelector(r),this._api=n}var e,r;return e=t,(r=[{key:"addItem",value:function(t){this._container.prepend(t)}},{key:"renderCards",value:function(t){var e=this;t.forEach((function(t){e._renderer(t)}))}}])&&c(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function a(t){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},a(t)}function s(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==a(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==a(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===a(o)?o:String(o)),n)}var o}var f=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._selector=document.querySelector(e),this._closeIcon=this._selector.querySelector(".popup__close-icon")}var e,r;return e=t,(r=[{key:"open",value:function(){this._selector.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose.bind(this))}},{key:"close",value:function(){this._selector.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose.bind(this))}},{key:"_handleEscClose",value:function(t){"Escape"===t.key&&this.close()}},{key:"setEventListeners",value:function(){var t=this;this._closeIcon.addEventListener("click",(function(){t.close()})),this._selector.addEventListener("click",(function(e){e.target.classList.contains("popup_opened")&&t.close()}))}}])&&s(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function p(t){return p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},p(t)}function y(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==p(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==p(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===p(o)?o:String(o)),n)}var o}function d(){return d="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=_(t)););return t}(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},d.apply(this,arguments)}function h(t,e){return h=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},h(t,e)}function _(t){return _=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},_(t)}var v=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&h(t,e)}(u,t);var e,r,n,o,i=(n=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=_(n);if(o){var r=_(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===p(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(e=i.call(this,t))._title=e._selector.querySelector(".popup__fullscreen-title"),e._image=e._selector.querySelector(".popup__fullscreen-image"),e}return e=u,(r=[{key:"open",value:function(t,e){d(_(u.prototype),"open",this).call(this),this._title.textContent=t,this._image.src=e,this._image.alt=t}}])&&y(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),u}(f);function m(t){return m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},m(t)}function b(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==m(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==m(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===m(o)?o:String(o)),n)}var o}function S(){return S="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=w(t)););return t}(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},S.apply(this,arguments)}function g(t,e){return g=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},g(t,e)}function w(t){return w=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},w(t)}var E=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&g(t,e)}(u,t);var e,r,n,o,i=(n=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=w(n);if(o){var r=w(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===m(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t,e){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(r=i.call(this,t))._submitForm=e,r._form=r._selector.querySelector(".popup__form"),r._formInputList=r._form.querySelectorAll(".popup__input"),r}return e=u,(r=[{key:"_getInputValues",value:function(){var t=this;return this._inputsObject={},this._formInputList.forEach((function(e){t._inputsObject[e.name]=e.value})),this._inputsObject}},{key:"setEventListeners",value:function(){var t=this;S(w(u.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(e){e.preventDefault(),t._submitForm(t._getInputValues()),t.close()}))}},{key:"close",value:function(){S(w(u.prototype),"close",this).call(this),this._form.reset()}}])&&b(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),u}(f);function k(t){return k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},k(t)}function j(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==k(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==k(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===k(o)?o:String(o)),n)}var o}function O(){return O="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(t,e,r){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=C(t)););return t}(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},O.apply(this,arguments)}function P(t,e){return P=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},P(t,e)}function C(t){return C=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},C(t)}var L=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&P(t,e)}(u,t);var e,r,n,o,i=(n=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=C(n);if(o){var r=C(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===k(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(t,e){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),(r=i.call(this,t))._form=r._selector.querySelector(".popup__form_type_delete-card"),r._deleteCard=e,r}return e=u,(r=[{key:"setEventListeners",value:function(){var t=this;O(C(u.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(e){e.preventDefault(),console.log("урааа"),t._deleteCard().then((function(t){console.log(t)})),t.close()}))}}])&&j(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),u}(f);function q(t){return q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},q(t)}function I(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==q(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==q(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===q(o)?o:String(o)),n)}var o}var T=function(){function t(e,r,n,o){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._userName=document.querySelector(e.userNameSelector),this._userAbout=document.querySelector(e.userAboutSelector),this._avatar=o}var e,r;return e=t,(r=[{key:"getUserInfo",value:function(){return{name:this._userName.textContent,about:this._userAbout.textContent}}},{key:"setUserInfo",value:function(t){this._userName.textContent=t.name,this._userAbout.textContent=t.about}}])&&I(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function R(t){return R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},R(t)}function A(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==R(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==R(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===R(o)?o:String(o)),n)}var o}var B=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._usersUrl=e.url.usersUrl,this._cardsUrl=e.url.cardsUrl,this._avatarUrl=e.url.avatarUrl,this._headers=e.headers}var e,r;return e=t,(r=[{key:"getInfoAboutUser",value:function(){return fetch(this._usersUrl,{method:"GET",headers:this._headers}).then((function(t){if(t.ok)return t.json();console.log("ошибка получения данных")}))}},{key:"getInitialCards",value:function(){return fetch(this._cardsUrl,{method:"GET",headers:this._headers}).then((function(t){if(t.ok)return t.json();console.log("ошибка получения данных")}))}},{key:"editProfileInfo",value:function(t){return fetch(this._usersUrl,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t.name,about:t.about})}).then((function(t){if(t.ok)return t.json();console.log("ошибка обработки данных")}))}},{key:"editAvatar",value:function(t){return fetch(this._avatarUrl,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t})}).then((function(t){if(t.ok)return t.json();console.log("ошибка обработки данных аватара")}))}},{key:"sendCard",value:function(t){return fetch(this._cardsUrl,{method:"POST",headers:this._headers,body:JSON.stringify({name:t.name,link:t.link,likes:t.likes})}).then((function(t){if(t.ok)return console.log("отправка карточки прошла успешно"),t.json();console.log("ошибка получения данных")}))}},{key:"deleteCard",value:function(t){return fetch(this._cardsUrl+"/"+t,{method:"DELETE",headers:this._headers}).then((function(t){if(t.ok)return t.json();console.log("ошибка удаления карточки")}))}}])&&A(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}(),x=document.querySelector(".profile__edit-button"),U=(document.querySelector(".popup_type_profile"),document.querySelector(".profile__name")),D=document.querySelector(".profile__description"),N=document.querySelector(".popup__form_type_profile"),M=document.querySelector(".popup__input_type_name"),V=document.querySelector(".popup__input_type_profession"),F=document.querySelector(".profile__avatar"),J=document.querySelector(".popup__form_type_avatar"),G=(document.querySelectorAll(".popup__close-icon"),document.querySelectorAll(".popup"),document.querySelector(".elements"),document.querySelector(".profile__add-button")),H=(document.querySelector(".popup_type_add-card"),document.querySelector(".popup__input_type_card-name")),z=document.querySelector(".popup__input_type_card-link"),$=document.querySelector(".popup__form_type_add-card");function K(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}document.querySelector(".popup__fullscreen-image"),document.querySelector(".popup__fullscreen-title"),document.querySelector(".popup_type_fullscreen"),document.querySelector(".popup_type_delete-card");var Q=new B({url:{usersUrl:"https://nomoreparties.co/v1/cohort-63/users/me",cardsUrl:"https://mesto.nomoreparties.co/v1/cohort-63/cards",avatarUrl:"https://mesto.nomoreparties.co/v1/cohort-63/users/me/avatar"},headers:{authorization:"e900e361-a4f9-4167-b7d1-fcc078aa308a","Content-Type":"application/json"}});Q.getInfoAboutUser().then((function(t){U.textContent=t.name,D.textContent=t.about,F.src=t.avatar})),new T({userNameSelector:".profile__name",userAboutSelector:".profile__description"},U,D,F);var W=new E(".popup_type_profile",(function(t){Q.editProfileInfo(t).then((function(t){console.log(t,"данные в момент отправления новой информации профиля"),U.textContent=t.name,D.textContent=t.about}))}));W.setEventListeners(),x.addEventListener("click",(function(){ct.switchErrorMode(),ct.switchProfileButtonMode(),M.value=U.textContent,V.value=D.textContent,W.open()}));var X=new E(".popup_type_avatar",(function(){var t=document.querySelector(".popup__input_type_avatar").value;console.log(t,"ссылка на аватар"),Q.editAvatar(t).then((function(t){console.log(t,"результат работы аватара"),F.src=t.avatar}))}));X.setEventListeners(),F.addEventListener("click",(function(){X.open()}));var Y="bde8a9ef60187f2d6a67a8f7";Promise.all([Q.getInfoAboutUser(),Q.getInitialCards()]).then((function(t){var e,r,n=(r=2,function(t){if(Array.isArray(t))return t}(e=t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,i,u,c=[],l=!0,a=!1;try{if(i=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=i.call(r)).done)&&(c.push(n.value),c.length!==e);l=!0);}catch(t){a=!0,o=t}finally{try{if(!l&&null!=r.return&&(u=r.return(),Object(u)!==u))return}finally{if(a)throw o}}return c}}(e,r)||function(t,e){if(t){if("string"==typeof t)return K(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?K(t,e):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=n[0],i=n[1];console.log(o,i,"вооооооооооооооот они!!!"),Z.renderCards(i.reverse())}));var Z=new l({items:[],renderer:function(t){Z.addItem(tt(t))}},".elements");function tt(t){return new i(t,Y,"#card-template",nt,it).generateCard()}var et=new E(".popup_type_add-card",(function(){var t={name:H.value,link:z.value,likes:[],owner:{_id:Y}};Z.addItem(tt(t)),Q.sendCard(t).then((function(t){console.log(t)}))}));et.setEventListeners(),G.addEventListener("click",(function(){lt.switchErrorMode(),lt.disableAddCardPopupButton(),et.open()}));var rt=new v(".popup_type_fullscreen");function nt(t,e){rt.open(t,e)}rt.setEventListeners();var ot=new L(".popup_type_delete-card",Q.deleteCard);function it(){ot.open()}ot.setEventListeners();var ut={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__submit-button",inactiveButtonClass:"popup__submit-button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"},ct=new r(ut,N);ct.enableValidation();var lt=new r(ut,$);lt.enableValidation(),new r(ut,J)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,